<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android Related Articles on Developer Blog - Jacek Marchwicki</title>
    <link>/blog/android/</link>
    <description>Recent content in Android Related Articles on Developer Blog - Jacek Marchwicki</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/blog/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>No sleeping during testing RxJava app!</title>
      <link>/blog/no-sleeping-during-testing-rxjava-app/</link>
      <pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate>
      <guid>/blog/no-sleeping-during-testing-rxjava-app/</guid>
      <description>During development of Android tests you&amp;rsquo;ve probably used &lt;code&gt;Thread.sleep()&lt;/code&gt;.  This seems reasonable solution at the first place, but after a while you get to a very wired issues.</description>
    </item>
    <item>
      <title>Solve your problems with time during Android Integration test</title>
      <link>/blog/solve-your-problems-with-time-during-android-integration-test/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      <guid>/blog/solve-your-problems-with-time-during-android-integration-test/</guid>
      <description>When you develop a real-life app with integrations tests you probably faced a problem that time is moving :) It doesn&amp;rsquo;t matter if you develop an alarm clock or a feed app that is less related to time, I&amp;rsquo;m almost 100% sure that app is more or less time-related.</description>
    </item>
    <item>
      <title>Errors... oh... those errors - coding</title>
      <link>/blog/errors...-oh...-those-errors-coding/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/blog/errors...-oh...-those-errors-coding/</guid>
      <description>Some time ago, I wrote an article about how important it is to handle errors in a nice way. In the article &amp;ldquo;Errors&amp;hellip; oh&amp;hellip; those errors&amp;rdquo;, I made a promise that there would be a continuation with coding examples. This is it.</description>
    </item>
    <item>
      <title>Using schedulers while testing your code</title>
      <link>/blog/using-schedulers-while-testing-your-code/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/blog/using-schedulers-while-testing-your-code/</guid>
      <description>While testing RxJava code it&amp;rsquo;s very important to choose a correct Scheduler class so your tests are reliable and fast. I&amp;rsquo;d like to present a few use cases.</description>
    </item>
    <item>
      <title>How to find StackOverflowError&#39;s</title>
      <link>/blog/how-to-find-stackoverflowerrors/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/blog/how-to-find-stackoverflowerrors/</guid>
      <description>Sometimes in your crash reporting tool you see StackOverflowErrors breaks down the app on some device models.  Some of them don’t occur on your device or the issues come about in unexpected non-reproducible circumstances.  I’ll give you some tips that allow finding the errors more easily.</description>
    </item>
    <item>
      <title>A nice reader/writer pattern</title>
      <link>/blog/a-nice-reader/writer-pattern/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/blog/a-nice-reader/writer-pattern/</guid>
      <description>During the development of a chat app, I had to implement some kind of lock logic. Usually, locking/unlocking code is hard to follow. If complex business logic uses complicated locking, your code becomes unreadable and unmaintainable. However, there is a pattern that can help you writing readable locking/unlocking code.</description>
    </item>
    <item>
      <title>Kotlin and RxJava with extension functions</title>
      <link>/blog/kotlin-and-rxjava-with-extension-functions/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/blog/kotlin-and-rxjava-with-extension-functions/</guid>
      <description>This is an introduction to some patterns that can be helpful during an implementation of Android applications that operate on any structured data, especially downloaded from APIs.</description>
    </item>
  </channel>
</rss>
