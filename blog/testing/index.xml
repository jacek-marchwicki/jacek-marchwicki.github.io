<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles about testing on Developer Blog - Jacek Marchwicki</title>
    <link>/blog/testing/</link>
    <description>Recent content in Articles about testing on Developer Blog - Jacek Marchwicki</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/blog/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Avoid using IDs in Espresso tests</title>
      <link>/blog/avoid-using-ids-in-espresso-tests/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/avoid-using-ids-in-espresso-tests/</guid>
      <description>&lt;strong&gt;Avoid using IDs in your Espresso tests to make them more readable, flexible, and maintainable. Learn how in this article.&lt;/strong&gt;&#xA;This description is also short and to the point, but it includes a call to action at the end, which encourages visitors to click on the article and learn more.</description>
    </item>
    <item>
      <title>Beware of UI test abstractions</title>
      <link>/blog/beware-of-ui-test-abstractions/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/beware-of-ui-test-abstractions/</guid>
      <description>&lt;strong&gt;Are your UI tests complex and difficult to maintain?&lt;/strong&gt;&#xA;If so, you&amp;rsquo;re not alone. Many developers use abstraction libraries to make UI testing easier, but these libraries can also make tests harder to understand and debug.&#xA;In this article, I&amp;rsquo;ll explain why you should use abstractions sparingly in UI testing. I&amp;rsquo;ll also show you how to write simple UI tests that are easy to understand, maintain, and debug.&#xA;If you&amp;rsquo;re serious about improving the quality of your UI tests, then you need to read this article.</description>
    </item>
    <item>
      <title>How to improve integration tests by using mock APIs to avoid scrolling</title>
      <link>/blog/how-to-improve-integration-tests-by-using-mock-apis-to-avoid-scrolling/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/how-to-improve-integration-tests-by-using-mock-apis-to-avoid-scrolling/</guid>
      <description>&lt;strong&gt;Do your integration tests involve scrolling? If so, you&amp;rsquo;re making your life harder than it needs to be.&lt;/strong&gt;&#xA;By using mock APIs to avoid scrolling, you can make your integration tests easier to write, maintain, and debug. This can lead to improved test coverage, reduced development time, and improved quality.&#xA;In this article, I&amp;rsquo;ll show you how to use mock APIs to avoid scrolling in your integration tests. I&amp;rsquo;ll also explain the positive business impact that this can have.&#xA;&lt;strong&gt;If you want to write better integration tests, then this article is for you.&lt;/strong&gt;</description>
    </item>
    <item>
      <title>Improve your Android tests with better assertions</title>
      <link>/blog/improve-your-android-tests-with-better-assertions/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/improve-your-android-tests-with-better-assertions/</guid>
      <description>&lt;strong&gt;Write better Android tests with better assertions&lt;/strong&gt;&#xA;Better assertions can help you find bugs earlier in the development process, reduce the time it takes to release new features, and improve customer satisfaction. In this blog post, you&amp;rsquo;ll learn how to use better assertions to improve the quality of your Android tests.</description>
    </item>
    <item>
      <title>Making Espresso Tests More Understandable and Reusable</title>
      <link>/blog/making-espresso-tests-more-understandable-and-reusable/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/making-espresso-tests-more-understandable-and-reusable/</guid>
      <description>&lt;strong&gt;Do you write Espresso tests? If so, you need to read this article!&lt;/strong&gt;&#xA;In this article, we will discuss a simple best practice for making Espresso tests more understandable and reusable: encapsulating complex matchers in functions. This can lead to a number of benefits, including increased developer productivity, reduced bug count, and improved test coverage.&#xA;So if you want to write better Espresso tests, be sure to read this article!</description>
    </item>
    <item>
      <title>When to skip end-to-end testing</title>
      <link>/blog/when-to-skip-end-to-end-testing/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/when-to-skip-end-to-end-testing/</guid>
      <description>End-to-end testing is important, but it&amp;rsquo;s not always worth the investment. Learn when to skip E2E testing to save time and money without sacrificing quality.</description>
    </item>
    <item>
      <title>Why you should always run UI tests on PRs before merging</title>
      <link>/blog/why-you-should-always-run-ui-tests-on-prs-before-merging/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/why-you-should-always-run-ui-tests-on-prs-before-merging/</guid>
      <description>Want to improve the quality of your app and your business? Running UI tests on PRs before merging is a simple but effective way to do it. In this article, I&amp;rsquo;ll explain why UI testing is so important and how to get started.</description>
    </item>
    <item>
      <title>Why you should start with one device for Android integration testing</title>
      <link>/blog/why-you-should-start-with-one-device-for-android-integration-testing/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/why-you-should-start-with-one-device-for-android-integration-testing/</guid>
      <description>&lt;strong&gt;Are you new to Android integration testing?&lt;/strong&gt; If so, you may be wondering how many devices you should test your app on. The answer is: start with one. Testing your app on multiple devices can be time-consuming and frustrating, especially if you&amp;rsquo;re just getting started. In this article, I&amp;rsquo;ll explain why it&amp;rsquo;s a good idea to start with one device for integration testing, and I&amp;rsquo;ll provide some tips for writing tests that are less likely to fail on different devices. If you want to learn more about how to get started with Android integration testing, I encourage you to read the full article.</description>
    </item>
    <item>
      <title>Why you shouldn&#39;t rely only on end-to-end tests</title>
      <link>/blog/why-you-shouldnt-rely-only-on-end-to-end-tests/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/blog/why-you-shouldnt-rely-only-on-end-to-end-tests/</guid>
      <description>&lt;strong&gt;Are you relying solely on end-to-end tests for your Android app?&lt;/strong&gt; If so, you&amp;rsquo;re missing out on a number of benefits that you can get by using a combination of unit, integration, and end-to-end tests.&#xA;In this article, I&amp;rsquo;ll explain why you shouldn&amp;rsquo;t rely only on end-to-end tests, and I&amp;rsquo;ll provide a specific solution that you can use to combine all three types of tests. This solution will help you to increase the stability of your app, reduce the time it takes to find and fix bugs, and improve the overall quality of your app.</description>
    </item>
  </channel>
</rss>
