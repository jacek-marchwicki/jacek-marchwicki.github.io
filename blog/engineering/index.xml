<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer Blog - Jacek Marchwicki – Engineering Articles</title>
    <link>/blog/engineering/</link>
    <description>Recent content in Engineering Articles on Developer Blog - Jacek Marchwicki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/blog/engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: When QA slows down your team</title>
      <link>/blog/when-qa-slows-down-your-team/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/when-qa-slows-down-your-team/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/blog/when-qa-slows-down-your-team/featured-title_hu159c2c1c9c3349a610f6f2d32bec148e_533867_640x0_resize_q75_catmullrom.jpg" width="640" height="800"/>]]>
        
        &lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;When a team wants a QA specialist to work on their project, it’s worth considering what this process is supposed to bring.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improvement of app stability.&lt;/li&gt;
&lt;li&gt;Faster feature delivery.&lt;/li&gt;
&lt;li&gt;Increase of team work efficiency.&lt;/li&gt;
&lt;li&gt;Support in testing the app in different environments.&lt;/li&gt;
&lt;li&gt;Ensuring the app has good quality before release.&lt;/li&gt;
&lt;li&gt;Ensuring the app works with different environments.&lt;/li&gt;
&lt;li&gt;Ensuring the app UI is well implemented.&lt;/li&gt;
&lt;li&gt;Ensuring the app UX is well designed.
Getting to know which of those responsibilities are important for your team is very useful, especially because the first four will speed up your team, whereas the remaining four will slow it down.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;why-may-the-qa-team-slow-down-your-team&#34;&gt;Why may the QA team slow down your team?&lt;/h1&gt;
&lt;p&gt;Let’s consider two cases: one with the participation of a QA team, the other without it.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Without a QA team&lt;/th&gt;
&lt;th&gt;With a QA team&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Developers implement feature 1&lt;/td&gt;
&lt;td&gt;Developers implement feature 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Developers release feature 1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Developers send their release to the QA team&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Users start using the app&lt;/td&gt;
&lt;td&gt;QAs test the app and find bugs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;The team decides which bugs need fixing&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Developers prepare a fix&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;QAs test the app and find no bugs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Developers release feature 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Users start using the app&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This very simple table shows that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even if you engage a QA member, your developers need to perform additional tasks that weren’t needed before (3 highlighted cells).&lt;/li&gt;
&lt;li&gt;Without a QA member, you gain additional time, which you can use to further improve your app (5 empty cells).&lt;/li&gt;
&lt;li&gt;Without a QA member, you could deliver the app sooner.&lt;/li&gt;
&lt;li&gt;Without a QA member, you might obtain user feedback sooner.
It’s also worth mentioning that employing a QA specialist might fit into your budget better than employing a developer who could deliver the/a feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;qa-gains-and-losses&#34;&gt;QA gains and losses&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There might be less bugs in your app, but will your users be happy with less features?&lt;/li&gt;
&lt;li&gt;Your QA might pick up some inefficient UX, but your users might provide you with better feedback sooner, saving/making up for those lost cycles.&lt;/li&gt;
&lt;li&gt;Your QA might find bugs, but the dev team might have no time to fix them.&lt;/li&gt;
&lt;li&gt;Thanks to QA, your devs might be able to ship bug-free code. However, they might be tempted not to test the app, considering testing QA team&amp;rsquo;s responsibility, not theirs.&lt;/li&gt;
&lt;li&gt;The QA team might find some nonspecific bugs that are hard to discern, but such bugs might only hit a fraction of the app users so they don’t require fixing.&lt;/li&gt;
&lt;li&gt;The QA team might efficiently cooperate with devs in finding bugs, but they might also  lower the devs&#39; morale, constantly proving that they are creating crappy software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Reading what you agree with is easy, the trick is to question your own views.&lt;/em&gt;
This is the end of this provocative article. Personally, I think QA could deliver great value in projects in which quality is key. However, it&amp;rsquo;s good to be aware of the problems I have mentioned and find ways to mitigate them. Hopefully this article will help you re-think the role of QA in your organization and make this process even more indispensable.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: When a product requirement is not worth implementing</title>
      <link>/blog/when-a-product-requirement-is-not-worth-implementing/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/when-a-product-requirement-is-not-worth-implementing/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/blog/when-a-product-requirement-is-not-worth-implementing/featured-title_hu1b827487bae0e0d5d951dad5a862a0a4_3469508_640x0_resize_q75_catmullrom.jpg" width="640" height="960"/>]]>
        
        &lt;p&gt;Life is full of compromises. So is software development. Decisions about features and the related requirements are based on the amount of time and money necessary to deliver good user experience.
When designing software, a team doesn’t always have full knowledge of what is possible and how much time and effort will be necessary to accomplish the goal.
This sometimes leads to under-estimating certain features. The results can be as insignificant as a one-hour fix of a button text, or as serious as a multi-year delay in the delivery of the entire app to the client. Some delays might be acceptable, but to some, you need to say “STOP!”.&lt;/p&gt;
&lt;p&gt;Every team member needs to be able to raise the alarm if something is taking more time than it should, or if they notice that implementing a given requirement becomes too expensive or too time-consuming. But how do we enable everyone to make such decisions or alert others so that the decision can be made jointly by the entire team?
I’d like to point out a few things that should be taken into account. But first, let’s have an example for illustration purposes:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Your team is working on a social app. The new requirement is to allow users to upload their profile images. The implementation of a part of the feature was initially estimated as ~2 work-days. But the developer responsible for this task spent 2 days on it and said that it was too hard to fulfill the requirement of the profile image upload limit of at least 5 MB while having a 512 kB limit set on the whole system.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;how-important-is-the-featurerequirement-for-the-final-product&#34;&gt;How important is the feature/requirement for the final product?&lt;/h1&gt;
&lt;p&gt;First of all, the team member needs to establish how valuable the feature is for the product. In our example, the importance of sharing profile pictures would be completely different for an app that allows for choosing the right male or female model for your project, where the image is crucial, and completely different for a forum of coffee-lovers, where it would only provide users with a way of expressing themselves.&lt;/p&gt;
&lt;h1 id=&#34;how-much-effort-is-necessary-to-build-the-feature--meet-the-requirement&#34;&gt;How much effort is necessary to build the feature / meet the requirement?&lt;/h1&gt;
&lt;p&gt;Another important aspect of the decision-making process is estimating how much effort would be necessary to develop the feature. In the beginning, a rough estimate is enough. I.e. one sprint of one person or 6 sprints of the entire team. This helps to make the right decision.&lt;/p&gt;
&lt;h1 id=&#34;can-we-achieve-this-in-a-simpler-way&#34;&gt;Can we achieve this in a simpler way?&lt;/h1&gt;
&lt;p&gt;Sometimes, there are simpler ways of developing a certain feature using non-standard solutions. In our example, the team could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement a frontend tool that shrinks any image to the desired size,&lt;/li&gt;
&lt;li&gt;Use some external solution for storing these images.&lt;/li&gt;
&lt;li&gt;Generate random color images for users, so that you don’t see their faces, but you’re able to distinguish them based on colors.&lt;/li&gt;
&lt;li&gt;Use images provided by a third-party login, i.e., Facebook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes developers, even very experienced ones, are only able to think about the problem in one particular way. It’s good to consult with your colleagues, as they may bring to the table a simpler solution that you would never think of.&lt;/p&gt;
&lt;h1 id=&#34;will-solving-this-problem-solve-other-problems-too&#34;&gt;Will solving this problem solve other problems too?&lt;/h1&gt;
&lt;p&gt;Usually, our problem is more deeply rooted in different areas of our product than the superficial issue we are initially trying to resolve. I.e. in our example, if we accept the limitation of the API, we might also limit uploading of all other data to the server - data that is even more important than that processed by the developed feature. The issue we’re dealing with might be worth fixing, if there’s a chance of it resurfacing later, in the planned features.&lt;/p&gt;
&lt;h1 id=&#34;is-it-beneficial-to-do-without-the-full-fledged-functionality-in-the-beginning&#34;&gt;Is it beneficial to do without the full-fledged functionality in the beginning?&lt;/h1&gt;
&lt;p&gt;Ask yourself: is it not more productive in the project phase to release a version that is limited? Might it be a good idea to release something and ask users for feedback? You can also try to measure how the feature is used to see if your problem is the user’s problem too. Fixing the issue can be planned later.&lt;/p&gt;
&lt;h1 id=&#34;how-much-effort-does-the-change-in-the-plan-require&#34;&gt;How much effort does the change in the plan require?&lt;/h1&gt;
&lt;p&gt;It’s very important to understand that changing plans/requirements has some implications. You need to be aware that discussing the problem with the rest of the team might prove more time-consuming in the end, than actually fixing the issue, so you should always consider whether it’s worth it.
Remember that changing the requirements affects also other people involved in the process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designers might need to be informed that they need to provide a UI for a message saying that the image size is limited.&lt;/li&gt;
&lt;li&gt;The message needs to be translated into different languages by translators.&lt;/li&gt;
&lt;li&gt;The documentation needs to be updated to reflect the change.&lt;/li&gt;
&lt;li&gt;Stakeholders need to be taken into account, and their time is the most expensive.&lt;/li&gt;
&lt;li&gt;The problem should be presented to your QA team.&lt;/li&gt;
&lt;li&gt;Some end-user guides might need to be updated so that they describe the limitation.&lt;/li&gt;
&lt;li&gt;Your help desk staff needs to be informed about the limitation.&lt;/li&gt;
&lt;li&gt;All the people that join the team might face the same problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;final-decision&#34;&gt;Final decision&lt;/h1&gt;
&lt;p&gt;Taking into account these factors should help the product team make the right decisions. It is a known fact that any decision-making, if not based on knowledge, is a lottery. If everyone in the team is able to quickly answer the questions listed above, then the decisions will simply be better.
And if your team is able to react swiftly to problems that they are likely to have, the final product is more likely to be a success.
With that in mind, in the upcoming article, we will focus on how to lower the necessary effort due to changes of plans.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Coastline paradox</title>
      <link>/blog/coastline-paradox/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/coastline-paradox/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/blog/coastline-paradox/featured-title_hub6bed809a18f511baa3e8ed6be2b62ab_3044106_640x0_resize_q75_catmullrom.jpg" width="640" height="480"/>]]>
        
        &lt;p&gt;The coastline paradox was first observed by Lewis Fry Richardson and later expanded upon by &lt;a href=&#34;https://science.sciencemag.org/content/156/3775/636.abstract&#34;&gt;Benoit Mandelbrot in Science Magazine in 1967&lt;/a&gt;. It shows that measuring the coastline length is not as straightforward as it might seem.&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 410px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/blog/coastline-paradox/featured-title_hub6bed809a18f511baa3e8ed6be2b62ab_3044106_600x300_fit_q75_catmullrom.jpg&#34; width=&#34;400&#34; height=&#34;300&#34; alt=&#34;Image shows coastline around a peninsula&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;Image shows coastline around a peninsula&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo by &lt;a href=&#34;https://unsplash.com/@maxboettinger?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Max Böttinger&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;

&lt;p&gt;If you measure it using a very rough satellite image, you’ll get a much smaller value than in the case of very precise images. This is because the latter will provide you with more details to be taken into account.
But let’s skip the theoretical considerations regarding this dilemma and focus on practical reasons for measuring the coastline length. These may include a road trip along the coast or sailing from one port to another. What we would find useful and practical in such circumstances are the measurements done by 14th-century cartographers, rather than subatomic-level surveys that would inevitably give much larger values.&lt;/p&gt;
&lt;p&gt;You’re probably wondering why I’m deliberating about coastlines at all. This is a software engineering blog, after all. But I have my well-grounded reasons, I assure you. Just keep on reading!&lt;/p&gt;
&lt;p&gt;The same principles apply to software development. When you’re working on a problem, you should look at it from the user’s perspective.
If you look too closely, you might waste time and effort on details that are irrelevant to your users and that might even cause new problems. For instance, you can have a button which is pixel-perfect in design and implementation. But its placement is completely wrong and users won’t notice the button and will miss on some important features. You might ask: “But isn’t it our ultimate goal to create perfect features?” Sure! However, attention to detail without looking at the whole picture entails certain risks. You might spend so much time refining your feature that your competitors will deliver it sooner. Delving into irrelevant details might cost you missing the opportunity to launch the product at the best possible moment.&lt;/p&gt;
&lt;p&gt;So if we, software engineers, can learn something from the coastline paradox, it’s this: never lose sight of the bigger picture, as it really helps you make the right decisions.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Errors... oh... those errors</title>
      <link>/blog/errors...-oh...-those-errors/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/errors...-oh...-those-errors/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/blog/errors...-oh...-those-errors/featured-title_hu798a16dc35616af1dc5943ffeca08caa_9962734_640x0_resize_q75_catmullrom.jpg" width="640" height="427"/>]]>
        
        &lt;ul&gt;
&lt;li&gt;Product owner focuses on happy path, ignoring issues like missing Internet connection.&lt;/li&gt;
&lt;li&gt;UI/UX designers focus on product owner satisfaction&lt;/li&gt;
&lt;li&gt;UI/UX designers don&amp;rsquo;t have good technical knowledge.&lt;/li&gt;
&lt;li&gt;Developers have thousands of tasks to fulfill, and none of them is called &amp;ldquo;error handling&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;And testers&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes&amp;hellip; sadly, most of the companies lack of error handling becomes a problem, when testers start doing their work or, even worse, upon user’s installation from a store.&lt;/p&gt;
&lt;h1 id=&#34;frustration&#34;&gt;Frustration&lt;/h1&gt;
&lt;p&gt;So let&amp;rsquo;s start with an example: Your app is an e-mail application, which will have a list of e-mails and some fields so a user can send a message using a send button.&lt;/p&gt;
&lt;p&gt;Because everyone did the job of implementing features very well but forgot about error handling, the following might happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A QA tester rejects the task with a comment &amp;ldquo;I clicked on send and nothing happened&amp;rdquo;.
Your testing team is very good, so the tester will also attach a video and application&amp;rsquo;s logs.&lt;/li&gt;
&lt;li&gt;You send the application to the product owner and he/she says: &amp;ldquo;I just got a version without sending e-mails implemented&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The application is in the store and a user says &amp;ldquo;I can&amp;rsquo;t click on send button&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Users are frustrated because they think that they aren&amp;rsquo;t smart enough to use the application and they don&amp;rsquo;t want to contact you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now everyone becomes frustrated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The tester becomes frustrated because the feature doesn’t work as expected.&lt;/li&gt;
&lt;li&gt;The product owner’s frustrated because the feature’s not delivered but the task status is “completed”.&lt;/li&gt;
&lt;li&gt;The user’s frustrated because the application that he/she uses doesn&amp;rsquo;t work, or he/she is frustrated because he/she doesn&amp;rsquo;t know how to use the app.&lt;/li&gt;
&lt;li&gt;The mobile developer is frustrated because he/she doesn&amp;rsquo;t know what happened and he/she doesn&amp;rsquo;t know how to fix it. He/She also needs to spend additional hours resolving the issue that might not be an issue.&lt;/li&gt;
&lt;li&gt;The back-end developer’s frustrated because the mobile developer imputes that this is server issue.&lt;/li&gt;
&lt;li&gt;The investor’s very angry because he/she is losing clients, time and money.&lt;/li&gt;
&lt;li&gt;The UI/UX will be angry because everyone will say that this was his/her fault.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;retrospection&#34;&gt;Retrospection&lt;/h1&gt;
&lt;p&gt;Now, it&amp;rsquo;s time for retrospection.&lt;/p&gt;
&lt;p&gt;The scrum master or the project owner starts the discussion about what happened. Developers (mobile/server) didn&amp;rsquo;t change anything and everything started working. The tester, product owner, and users don&amp;rsquo;t see the problem anymore. Problem solved! - But wait&amp;hellip; good PM will continue to push the team to find the solution to the future problems like these.&lt;/p&gt;
&lt;p&gt;So they will brainstorm to find out what might have happened:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There were temporary problems with the connection to database,&lt;/li&gt;
&lt;li&gt;The Europe-America fiber had some temporary outage,&lt;/li&gt;
&lt;li&gt;There was a deploy during that period,&lt;/li&gt;
&lt;li&gt;There is some ugly bug in production,&lt;/li&gt;
&lt;li&gt;The mobile app has some bug in the version that is in the store,&lt;/li&gt;
&lt;li&gt;The device was connected to a network that didn&amp;rsquo;t have Internet access (like public wifi without user’s acceptance of network agreement),&lt;/li&gt;
&lt;li&gt;A user was disconnected from wifi,&lt;/li&gt;
&lt;li&gt;The device has some problems with network,&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And guess what?&amp;hellip; No one will know which of these problems occurred. Moreover, no one will know how to address such an issue, now and in the future.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s more, someone from the team realized that we can show users a message &amp;ldquo;Oops, something went wrong.&amp;rdquo; if an issue occurs.. This is a good starting point but doesn&amp;rsquo;t help to understand which problem we’re dealing with.&lt;/p&gt;
&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Error handling should consist in distinguishing problems from one another and helping to resolve issues. Errors aren’t only for end users but also for developers.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If a user sees an error, he/she should know what to do next.&lt;/li&gt;
&lt;li&gt;If a tester sees an error, he/she should know how to report an issue.&lt;/li&gt;
&lt;li&gt;If a developer sees an error, he/she should know how to fix it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s worth to have error messages that are helpful for the developer not only in the debug version, but also in the final product. In our example, if a user sends a screenshot with &amp;ldquo;Oops, Temporary server outage (502)&amp;rdquo; error and a developer will see it, he/she will instantly know that the problem was related to the deployment of production server - and there we have room for improvement. You can also send back a quick response to the user in which you inform what the problem was and assure that it was only temporary.&lt;/p&gt;
&lt;h2 id=&#34;error-types&#34;&gt;Error types&lt;/h2&gt;
&lt;p&gt;So let&amp;rsquo;s start with basic error messages that we implement and why they are important:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Loading&amp;hellip;&lt;/strong&gt; - the most important feedback for a user that something is loading. A user needs to know that there is nothing to worry about, just that the content is being fetched from the Internet. If loading takes too much time, he/she might think about changing his/her network provider :) Without any progress indicator in the e-mail app, when no e-mails are yet displayed to the user due to loading, he might think: “All my e-mails were lost”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Internet, check your connection&lt;/strong&gt; - this is the second most important feedback for a user. Lack of Internet access is a common situation. On the train, plane, in the tunnel, at the underground station, or even some places in a flat. Without this message, a user might think that an app has broken or he/she doesn&amp;rsquo;t know how to do things. Show a user that it&amp;rsquo;s neither his nor your fault. Show him/her that he/she can fix this problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your password is wrong&lt;/strong&gt;, &lt;strong&gt;Title should be filled&lt;/strong&gt; - It is definitely frustrating to a user if he/she clicks the send button and doesn&amp;rsquo;t know why he/she can&amp;rsquo;t send an e-mail - he/she just forgot to type in recipients. People are imperfect and we tend to forget about things. So if a user forgets to fill something in, you should help him/her out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem with network connection&lt;/strong&gt; - (optional but useful) An app can distinguish missing network reported by the device’s operating system from connection issues while fetching data (like problem accessing your server, broken connection, DNS server issue, etc.). These types of errors do not precisely mean that a root of the problem is a client or server network. The good practice is to distinguish them from “No Internet” error, so a developer can guess what is wrong.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No friends, add them using + icon&lt;/strong&gt;, &lt;strong&gt;No messages, you can create new ones&lt;/strong&gt; - Sometimes when the list is empty, users think that something went wrong. It&amp;rsquo;s a good idea to show a placeholder with a suggestion how he/she should react to change this state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Temporary server downtime, try again in a couple of minutes&lt;/strong&gt; - Server updates happen from time to time. Even If you usually have updates without downtime, it&amp;rsquo;s a good practice to have an error message that server is currently deploying. Usually, servers tend to return 502 HTTP error code in such situations. Your client is happy because he/she knows that an issue will be resolved within minutes. Developer is happy because the QA team isn’t going to reject his/her task, but ask the back-end team if there is an ongoing deployment. You are happy during development because you know that an app hasn&amp;rsquo;t broken down, just a dev team doing a deployment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Temporary server issue (500)&lt;/strong&gt; - This message should be displayed when you get  a 5xx response code from a server. This should never happen but if it does , your QA team will fill a ticket to the back-end team. If a user  sends a screenshot of the bug, you know better what went wrong. The mobile team’s  happy because they’re not disturbed. The back-end team is  happy because it’s easier for them to diagnose the problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unknown application error (422)&lt;/strong&gt; - This message should be displayed when you get a 4xx response code from a server. This  should never happen either.  This time, the QA team  assigns it to the mobile team. Again, you get a better understanding of users&#39; problems. The mobile team knows how to handle them and the back-end team stays safe.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post not found&lt;/strong&gt;, &lt;strong&gt;Not found&lt;/strong&gt; - It&amp;rsquo;s also a good practice to implement this specific error as the user knows how to handle such situations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;errors-persistence&#34;&gt;Errors persistence&lt;/h2&gt;
&lt;p&gt;There is one more thing. Apps tend to show &lt;a href=&#34;https://developer.android.com/guide/topics/ui/notifiers/toasts&#34;&gt;toasts/snack&lt;/a&gt; bars with error notification. It&amp;rsquo;s better than no error messages but toasts automatically disappear without solving an issue.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s show this by example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you open an e-mail application,&lt;/li&gt;
&lt;li&gt;there’s a problem with the Internet connection so e-mails can&amp;rsquo;t be downloaded and a snack bar is displayed,&lt;/li&gt;
&lt;li&gt;you don’t see a snack bar appear because you‘re talking to a friend,&lt;/li&gt;
&lt;li&gt;the snack bar disappears after 2 seconds,&lt;/li&gt;
&lt;li&gt;you look at your e-mail application, see nothing and become very angry because you think someone has hacked into your e-mail account and deleted all of your precious e-mails,&lt;/li&gt;
&lt;li&gt;the screenshot of the empty inbox is sent to the development team along with a complaint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it be much better to display an error message incessantly until e-mails load? It wouldn&amp;rsquo;t cause such problems.&lt;/p&gt;
&lt;p&gt;But snack bars aren&amp;rsquo;t always such a wrong solution. If you pull-to-refresh your e-mails, snack bar will be much better than a persistent error message. If refreshing fails, you can still see old e-mails with a small snack bar that will not cover user content.&lt;/p&gt;
&lt;p&gt;Also, a snack bar’s pretty useful for errors about liking, commenting, creating posts and during logging in; when a user’s aware that an action didn&amp;rsquo;t succeed and when he’s able to retry instantly.&lt;/p&gt;
&lt;h2 id=&#34;disturbing-errors&#34;&gt;Disturbing errors&lt;/h2&gt;
&lt;p&gt;Errors shouldn&amp;rsquo;t make user’s work harder.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;content shouldn&amp;rsquo;t be overlapped by errors,&lt;/li&gt;
&lt;li&gt;a snack bar shouldn&amp;rsquo;t overlap action buttons,&lt;/li&gt;
&lt;li&gt;you shouldn&amp;rsquo;t use error messages as dialog windows because they disrupt users&#39; workflow. Only in a very critical situation, when user’s data might be lost, can you show errors as dialog windows,&lt;/li&gt;
&lt;li&gt;Error messages shouldn&amp;rsquo;t block other parts of UI. A user should be able to  use other app features during the outage time.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Learn from others&#39; mistakes - do error handling TODAY, not tomorrow.&lt;/li&gt;
&lt;li&gt;Catch as many errors as you can.&lt;/li&gt;
&lt;li&gt;Weak error handling is better than none.&lt;/li&gt;
&lt;li&gt;Error handling should be as easy to implement as possible , no matter the feature.&lt;/li&gt;
&lt;li&gt;If you display an error message that helps your user resolve a problem, you will not have his/her problem on your shoulders.&lt;/li&gt;
&lt;li&gt;If you display an error message that helps a QA team find a bug, you will spend less time on finding causes of the issues.&lt;/li&gt;
&lt;li&gt;If you display an error message that helps you, you will spend less time debugging the app.&lt;/li&gt;
&lt;li&gt;If you display an error message that helps everyone, everyone will be happy.&lt;/li&gt;
&lt;li&gt;Error handling should distinguish between problems and help resolve issues.&lt;/li&gt;
&lt;li&gt;Error messages aren’t meant only for end users but also for developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;whats-more&#34;&gt;What&amp;rsquo;s more&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;An example of how to display error messages using Kotlin on Android is presented in the next article - &lt;a href=&#34;/blog/errors...-oh...-those-errors-coding/&#34;&gt;Errors&amp;hellip; oh&amp;hellip; those errors - coding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Working with git submodules (very old article)</title>
      <link>/blog/working-with-git-submodules-very-old-article/</link>
      <pubDate>Wed, 20 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/working-with-git-submodules-very-old-article/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article is very, very old. I&amp;rsquo;m publishing it mostly for fun :)&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Working with submodules looks tricki at the beginning but it is an elegant way to share your project code and DRY (Don&amp;rsquo;t Repeat Yourself). We started to use submodules a lot in &lt;a href=&#34;https://appunite.com&#34;&gt;appunite.com&lt;/a&gt;, but there is not much said in WWW about how to use git submodules in real projects. To start this tutorial you have to have a basic knowledge about git: (clone, fetch, merge, push, branch)&lt;/p&gt;
&lt;h1 id=&#34;starting&#34;&gt;Starting&lt;/h1&gt;
&lt;p&gt;It is important to say what could become a git submodule. Any of git repo can be used as a submodule. Any? Yes - any. This means that you do not have to clone your library from github.com to some directory, and paste it to your project directory - you really shouldn&amp;rsquo;t do that way. You should sumodule - it to your project directory.&lt;/p&gt;
&lt;h1 id=&#34;real-tutorial&#34;&gt;Real tutorial&lt;/h1&gt;
&lt;h2 id=&#34;create-project&#34;&gt;Create project&lt;/h2&gt;
&lt;p&gt;To use submodules you have to have a project which will use some shared data space. You have to remember that whole file structure from submodule will be placed in a directory in the parent module. You can create structure like this if you are an Android developer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Project1/Project1/src/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1/Project1/res/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1/Submodule1/*&lt;/code&gt; - for submodule files (you do not need to actually create this directory)
Now you can do this:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir Project1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1$ git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project[]$&lt;/code&gt; create some files and edit them&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project[]$ git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project[]$ git commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go back few times to pkt. 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you have normal project with few commits as normaly you have. Remember to create .gitignore file for real world projects - to ommit unnecsery files.&lt;/p&gt;
&lt;h2 id=&#34;create-submodule&#34;&gt;Create submodule&lt;/h2&gt;
&lt;p&gt;Now it is time to create shared space for your projects. I assume that shared space will be created in the same parent directory as previous project &amp;ldquo;Project1&amp;rdquo;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir Submodule1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1$ git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[]$&lt;/code&gt; create some files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[]$ git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[]$ git commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go back few times to pkt. 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you have normal project with few commits as normaly you have. Yes I know it is copy and past from previous header, because as I previously marked - submodule is normal git repository. You have to better put it to Your mind for better uderstending.&lt;/p&gt;
&lt;h2 id=&#34;add-submodule-to-your-project&#34;&gt;Add submodule to your project&lt;/h2&gt;
&lt;p&gt;Now it is time to add submodule to your project. That command we will use is git submodule add - it is similar to git clone, but it has to be run in the root of a some project directory (directory containing the .git directory). And another difference is that it creates/extends .gitmodules file. Let&amp;rsquo;s do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git add submodule ../Submodule1 Submodule1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;the first command clones &lt;code&gt;../Submodule1&lt;/code&gt; repository to &lt;code&gt;Submodule1&lt;/code&gt; directory. It creates &lt;code&gt;.gitmodules&lt;/code&gt; text file with information where repository is and where it is/should be cloned. And last but no less important: it creates reference from &lt;code&gt;Project1&lt;/code&gt; commit to &lt;code&gt;Submodule1&lt;/code&gt; commit.&lt;/p&gt;
&lt;p&gt;After changing working directory to &lt;code&gt;Project1/Submodule1&lt;/code&gt; you can invoke git commands, but note that those commands apply to your &lt;code&gt;Project1/Submodule1&lt;/code&gt; project not &lt;code&gt;Project1&lt;/code&gt;. I remind, submodule is only:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.gitmodules&lt;/code&gt; file reference submodule repository to directory in your project&lt;/li&gt;
&lt;li&gt;reference from your commit in Project1 to submodule commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its means a lot, and this tutorial aims to highlight this.&lt;/p&gt;
&lt;p&gt;Additionally you can observe that in your submodule directory there is a &lt;code&gt;.git&lt;/code&gt; directory or, in newer version of git tool a &lt;code&gt;.git&lt;/code&gt; file with reference to another directory (i.e. gitdir: &lt;code&gt;../.git/modules/Submodule1&lt;/code&gt;). This directory (or this directory reference) contains all data for you submodule revision control.&lt;/p&gt;
&lt;p&gt;Ok&amp;hellip; back to work.&lt;/p&gt;
&lt;h2 id=&#34;modifications-in-submodule&#34;&gt;Modifications in submodule&lt;/h2&gt;
&lt;p&gt;Ok.. now you know how to add a submodule. Then create a second project (&lt;code&gt;&amp;quot;Project2&amp;quot;&lt;/code&gt;) that will contain this submodule - &lt;code&gt;Project2&lt;/code&gt; will be used for testing proposes.&lt;/p&gt;
&lt;p&gt;Assume that you realized that some changes in Submodule1 should be made (i.e. modification of file). Let me start:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ cd Submodule1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$&lt;/code&gt; #edit some file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$ cd ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git status&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Now you observe that in your project in &lt;code&gt;Submodule1&lt;/code&gt; directory is marked as &lt;em&gt;&amp;ldquo;modified content&amp;rdquo;&lt;/em&gt;. This means that your submodule has some uncommited content. If you see this marker you have to be careful because you can commit some changes in your project and send to repository omitting changes in your submodule.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ cd Submodule1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$ git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$ git commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$ cd ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git status&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Now you can observe another marker near your &lt;code&gt;Submodule1&lt;/code&gt; directory - &lt;em&gt;&amp;ldquo;new commits&amp;rdquo;&lt;/em&gt;. This marker means that your &lt;code&gt;Submodule1&lt;/code&gt; is checked-out in commit different that commit reference stored in &lt;code&gt;Project1&lt;/code&gt; commit.&lt;/strong&gt;
&lt;strong&gt;It is very important to understand what it means because you can piss off friends that work with you if you mess something up in the repository ;).&lt;/strong&gt;
&lt;strong&gt;Just now it means that you created new commit in &lt;code&gt;Submodule1&lt;/code&gt; but you did not update reference in &lt;code&gt;Project1&lt;/code&gt; to newer version of &lt;code&gt;Submodule1&lt;/code&gt; (this marker can mean something else but I will explain this in later in this document).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok.. fix this up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git add Submodule1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$&lt;/code&gt; edit some file and add them to commit if you want&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok.. there is another place you can screw something up now. If you invoke &lt;code&gt;git push&lt;/code&gt; on your &lt;code&gt;Project1&lt;/code&gt; your friends will become evil zombies and bury you in the grave as soon as you return to the office. This can happen because you push changes to &lt;code&gt;Project1&lt;/code&gt; repository without pushing &lt;code&gt;Submodule1&lt;/code&gt;. This evil friend is the one who pulled &lt;code&gt;Project1&lt;/code&gt; that has reference to &lt;code&gt;Submodule1&lt;/code&gt; commit which is not in &lt;code&gt;Submodule1&lt;/code&gt; repository. If you do not want to run from zombies you have to do those in the right order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ cd Submodule1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$ git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$&lt;/code&gt; make sure that everything are OK&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Submodule1[master]$ cd ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project1[master]$ git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok now you are safe.&lt;/p&gt;
&lt;h2 id=&#34;pulling-project-with-submodules&#34;&gt;Pulling project with submodules&lt;/h2&gt;
&lt;p&gt;coming soon&lt;/p&gt;
&lt;h2 id=&#34;updating-to-the-newest-version-of-submodule&#34;&gt;Updating to the newest version of submodule&lt;/h2&gt;
&lt;p&gt;coming soon&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to Jarosław Gliwiński who pointed me a lot of spelling errors.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Working with gerrit (very old article)</title>
      <link>/blog/working-with-gerrit-very-old-article/</link>
      <pubDate>Wed, 02 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/working-with-gerrit-very-old-article/</guid>
      <description>
        
        
        
        <![CDATA[<img src="/blog/working-with-gerrit-very-old-article/featured-title_hu44d917ee2faef8a5b72a0e8af10b6799_2586287_640x0_resize_q75_catmullrom.jpg" width="640" height="960"/>]]>
        
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article is very, very old. I&amp;rsquo;m publishing it mostly for fun :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before start&lt;/strong&gt;: in later of this document I assume that you have a basics of git knowledge.
In our &lt;a href=&#34;https://appunite.com&#34;&gt;development team&lt;/a&gt; we use git a lot, but git not solve every problem - it&amp;rsquo;s only a source control software. We need more, we employe new people who at an start point often make mistakes - and write ugly code. We decided to make code review, and for this propose we choose gerrit.&lt;/p&gt;
&lt;p&gt;Gerrit is nothing more then git repository and tool that can approve and comment commits.
Whole workflow involves of create commit, push it to gist, wait for approval - and boom - everything work. But because we often make mistakes and everyone in company work (or should work) asynchronous - this workflow is a little more complicated. Grate picture I found on Android developers site that present workflow on gerrit:&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 199px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/blog/working-with-gerrit-very-old-article/workflow_hu022306b1649cae84c470f4eef6df285f_99006_600x300_fit_catmullrom_2.png&#34; width=&#34;189&#34; height=&#34;300&#34; alt=&#34;Workflow on gerrit (from [Android site](http://source.android.com/images/workflow-0.png))&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;Workflow on gerrit (from [Android site](http://source.android.com/images/workflow-0.png))&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;d better look at this diagram before continue for better understanding of commands bellow.&lt;/p&gt;
&lt;h1 id=&#34;lets-starts&#34;&gt;Lets starts&lt;/h1&gt;
&lt;p&gt;When using gerrit your repo usually looks like: &lt;code&gt;ssh://&amp;lt;username&amp;gt;@review.&amp;lt;your-domain&amp;gt;:29418/&amp;lt;your project&amp;gt;.git&lt;/code&gt;. Part that can create problems is &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt;, especially when you are using submodules because you will have to put: git submodule add &lt;code&gt;ssh://&amp;lt;username&amp;gt;@review.&amp;lt;your-domain&amp;gt;:29418/&amp;lt;your project&amp;gt;.git &amp;lt;your directory&amp;gt;&lt;/code&gt;, and everyone who download your repo will have to replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with his/her username. Instead I suggest to add two lines to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host review.assembla.com
  User jacek.marchwicki
  Port 29418
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and use &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;submodule add&lt;/code&gt;, &lt;code&gt;remote add&lt;/code&gt; omitting the &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; part.
For testing proposes I suggest to use &lt;a href=&#34;http://assembla.com/&#34;&gt;assembla.com&lt;/a&gt; with gerrit - but if you rather want to use some other tool you are free to go. I assume you already have gerrit repo url, in my case: &lt;code&gt;ssh://review.assembla.com/gerrit-example.git&lt;/code&gt;
than create project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir gerrit-example
git init
touch README.md
git add -A
git commit
git remote add origin ssh://review.assembla.com/gerrit-example.git
git push origin HEAD:refs/heads/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your project should be on gerrit repo, now everyone can pull it as usual:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone ssh://rgit.assembla.com/gerrit-example.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;And what is most important you have to install hook for commits after clone and import:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;scp review.assembla.com:hooks/commit-msg .git/hooks/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;To avoid screwing something up is better to remove master on your local repository and use origin/master instead&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote update
git checkout origin/master
git brach -d master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;making-changes&#34;&gt;Making changes&lt;/h1&gt;
&lt;p&gt;Before making some changes, lets do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &amp;gt; file1.txt &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;some text of file1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;and mre text of file1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &amp;gt; file2.txt &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;some text of file2
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;and more text of file2
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
git add file1.txt
git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this time I specially forgot of &lt;code&gt;file2.txt&lt;/code&gt; in commit and done a typo in &lt;code&gt;file1.txt&lt;/code&gt; for learning propose.
You can ensure that in your last commit was &lt;code&gt;&amp;quot;Change-Id: ***&amp;quot;&lt;/code&gt; looking in &lt;code&gt;git log&lt;/code&gt;. If not you did not installed commit-msg hook, so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;scp review.assembla.com:hooks/commit-msg .git/hooks/
git add file1.txt
git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command append fixes tu current commit.
If &lt;code&gt;&amp;quot;Change-Id&amp;quot;&lt;/code&gt; now appears in log you can submit your commit for review:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push origin HEAD:refs/for/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;reviewing-code&#34;&gt;Reviewing code&lt;/h1&gt;
&lt;p&gt;Now you have too look on your gerrit site: i.e.: &lt;code&gt;https://review.assembla.com/&lt;/code&gt; and in &lt;em&gt;&amp;ldquo;All-&amp;gt;Open&amp;rdquo;&lt;/em&gt; section you should see a your commit to approve. Normally you wouldn&amp;rsquo;t do yourself, but for test proposes we you can ;). One code reviewer should checkout this code and test it, and two of code reviewers should only check for changes that you made i.e.:
Two of your friends look in to code on commit site, commenting your code and click one button on &amp;ldquo;Code review&amp;rdquo; +1 if is look ok, -1 if its not look ok - i.e. some bug.
Third friend download code and verify it.&lt;/p&gt;
&lt;h2 id=&#34;verifying&#34;&gt;Verifying&lt;/h2&gt;
&lt;p&gt;Let become third friend. Clone your project to some other directory to simulate third friend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone ssh://review.assembla.com:/gerrit-example.git gerrit-example2
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; gerrit-example2
scp review.assembla.com:hooks/commit-msg .git/hooks/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok.. look for some commits to verify on &amp;ldquo;All-&amp;gt;Open&amp;rdquo; get some and copy url from its page and type it in command line:
git fetch ssh://review.assembla.com:/gerrit-example refs/changes/73/6673/1 &amp;amp;&amp;amp; git checkout -b c6673 FETCH_HEAD
Compile it and test it - I know it is hard do compile text files but you can imagine it ;)
Now you should use &amp;ldquo;Review&amp;rdquo; button on commit site and type your vote in &amp;ldquo;Verified&amp;rdquo; section and fill a comment if needed.&lt;/p&gt;
&lt;h2 id=&#34;code-review&#34;&gt;Code review&lt;/h2&gt;
&lt;p&gt;Let become one of your first and second friend. They no need to download code, they only need to check your code on the web site. They check code, comment it if they find something to comment, and approve or not (+1, -1 or 0). Suppose that first friend looked at your code and +1 LGTM (Look good to me), but second noticed that you filled a typo in file1.txt. He should give -1 and fill a comment.&lt;/p&gt;
&lt;h2 id=&#34;repairing&#34;&gt;Repairing&lt;/h2&gt;
&lt;p&gt;No you return and look for reviews and you see that your code was not approved, now you should fix it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ../gerrit-example
git fetch ssh://review.assembla.com/gerrit-example refs/changes/73/6673/1 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout -b c6673 FETCH_HEAD
sed -i &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;s/mre/more/&amp;#34;&lt;/span&gt; file1.txt
git add file1.txt
git commit --amend
git push origin HEAD:refs/for/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your code is corrected an sendend second time to code review&lt;/p&gt;
&lt;h2 id=&#34;merging&#34;&gt;Merging&lt;/h2&gt;
&lt;p&gt;Now everyone of your friend approved you commit but you have bad luck - some other commit was approved before and there are conflict.
You have to resolve you commit and sand changes back go gerrit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout master
git pull
ssh://review.assembla.com/gerrit-example refs/changes/73/6673/1 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout -b c6673 FETCH_HEAD
git remote update
git rebase origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;resolve conflicts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -A
git rebase --commit
git push origin HEAD:refs/for/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you code with fresh base was sent to review. And this time your friends approved and verified your code - your code will be automatically merged.&lt;/p&gt;
&lt;h2 id=&#34;fixing-order&#34;&gt;Fixing order&lt;/h2&gt;
&lt;p&gt;Sometimes you can observer that you commit have OUTDATED dependency. This mean that commit which was parent from your have never version. Now you have to get rid of outdated commit. You will use cherry-pick which inserts you commit at top of another commit. You have to choose a commit which you would like to be the parent of your commit. Usually is a newer version of outdated commit.
You have to check it out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh://review.assembla.com/gerrit-example refs/changes/73/6673/3 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout FETCH_HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and cherry pick your commit to remove outdated dependency:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh://review.assembla.com/gerrit-example refs/changes/74/234/1 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git cherry-pick FETCH_HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;resolve conflicts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -A
git commit
git push origin HEAD:refs/for/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you should observer that on gerrit you do not have OUTDATED reference.&lt;/p&gt;
&lt;h2 id=&#34;abandoned&#34;&gt;Abandoned&lt;/h2&gt;
&lt;p&gt;If your commit is abandoned it means it will never be merged to repository. But if you have dependency from ABANDONED you have to get rid of this dependency. You have to choose some commit as a parent of your commit - usually origin/master and cherry-pick your commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote update
git checkout origin/master
ssh://review.assembla.com/gerrit-example refs/changes/74/234/1 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git cherry-pick FETCH_HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;resolve conflicts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -A
git commit
git push origin HEAD:refs/for/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you should observe that in gerrit you do not have dependency from ABANDONED commit.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
